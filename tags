!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Action	src/action.py	/^class Action:$/;"	c
Agent	src/agent.py	/^class Agent:$/;"	c
AverageMeter	src/action.py	/^class AverageMeter:$/;"	c
CIFAR10Network	src/utils/CIFAR10Network.py	/^class CIFAR10Network(nn.Module):$/;"	c
Config	src/config.py	/^class Config:$/;"	c
DataPrefetcher	src/dataset.py	/^class DataPrefetcher:$/;"	c
Dataset	src/dataset.py	/^class Dataset:$/;"	c
MNISTNetwork	src/utils/MNISTNetwork.py	/^class MNISTNetwork(nn.Module):$/;"	c
Net	src/net.py	/^class Net:$/;"	c
SimpleDataset	src/dataset.py	/^class SimpleDataset(torch.utils.data.Dataset):$/;"	c
_HungarianState	src/utils/linear_assignment_.py	/^class _HungarianState:$/;"	c
__getitem__	src/dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SimpleDataset	file:
__getitem__	src/dataset.py	/^    def __getitem__(self, index):$/;"	m	class:smallDataset	file:
__init__	src/action.py	/^    def __init__(self):$/;"	m	class:AverageMeter
__init__	src/action.py	/^    def __init__(self, config: dict):$/;"	m	class:Action
__init__	src/agent.py	/^    def __init__(self, config: dict):$/;"	m	class:Agent
__init__	src/config.py	/^    def __init__(self):$/;"	m	class:Config
__init__	src/dataset.py	/^    def __init__(self, config):$/;"	m	class:Dataset
__init__	src/dataset.py	/^    def __init__(self, data, transform):$/;"	m	class:smallDataset
__init__	src/dataset.py	/^    def __init__(self, data: np.ndarray, targets: np.ndarray, transform):$/;"	m	class:SimpleDataset
__init__	src/dataset.py	/^    def __init__(self, loader: DataLoader, mean: list, std: list):$/;"	m	class:DataPrefetcher
__init__	src/net.py	/^    def __init__(self, config: dict):$/;"	m	class:Net
__init__	src/utils/CIFAR10Network.py	/^    def __init__(self, config: dict):$/;"	m	class:CIFAR10Network
__init__	src/utils/MNISTNetwork.py	/^    def __init__(self, config: dict):$/;"	m	class:MNISTNetwork
__init__	src/utils/linear_assignment_.py	/^    def __init__(self, cost_matrix):$/;"	m	class:_HungarianState
__init__	src/utils/loss.py	/^    def __init__(self, upper_threshold: float, lower_threshold: float, device):$/;"	m	class:modifiedBCELoss
__len__	src/dataset.py	/^    def __len__(self):$/;"	m	class:SimpleDataset	file:
__len__	src/dataset.py	/^    def __len__(self):$/;"	m	class:smallDataset	file:
_add_default_setting	src/config.py	/^    def _add_default_setting(self):$/;"	m	class:Config
_add_special_setting	src/config.py	/^    def _add_special_setting(self):$/;"	m	class:Config
_clear_covers	src/utils/linear_assignment_.py	/^    def _clear_covers(self):$/;"	m	class:_HungarianState
_hungarian	src/utils/linear_assignment_.py	/^def _hungarian(cost_matrix):$/;"	f
_load_cifar10	src/dataset.py	/^    def _load_cifar10(self):$/;"	m	class:Dataset
_load_default_setting	src/config.py	/^    def _load_default_setting(self):$/;"	m	class:Config
_load_mnist	src/dataset.py	/^    def _load_mnist(self):$/;"	m	class:Dataset
_load_necessary	src/config.py	/^    def _load_necessary(self):$/;"	m	class:Config
_load_special_setting	src/config.py	/^    def _load_special_setting(self):$/;"	m	class:Config
_step1	src/utils/linear_assignment_.py	/^def _step1(state):$/;"	f
_step3	src/utils/linear_assignment_.py	/^def _step3(state):$/;"	f
_step4	src/utils/linear_assignment_.py	/^def _step4(state):$/;"	f
_step5	src/utils/linear_assignment_.py	/^def _step5(state):$/;"	f
_step6	src/utils/linear_assignment_.py	/^def _step6(state):$/;"	f
compute_loss	src/action.py	/^    def compute_loss(self, loss_fn: list, predictions: list, targets: list):$/;"	m	class:Action
eval_epoch	src/agent.py	/^    def eval_epoch(self, loader, model, loss_fn, threshold):$/;"	m	class:Agent
fit	src/agent.py	/^    def fit(self, train_loader, val_loader, model, loss_fn, optimizer):$/;"	m	class:Agent
forward	src/utils/CIFAR10Network.py	/^    def forward(self, x):$/;"	m	class:CIFAR10Network
forward	src/utils/MNISTNetwork.py	/^    def forward(self, x):$/;"	m	class:MNISTNetwork
forward	src/utils/loss.py	/^    def forward(self, targets, predicted):$/;"	m	class:modifiedBCELoss
gcollect	src/action.py	/^def gcollect(func, *args, **kwargs):$/;"	f
get_acc	src/action.py	/^def get_acc(y_true: np.ndarray, y_pred: np.ndarray):$/;"	f
get_ari	src/action.py	/^def get_ari(y_true, y_pred):$/;"	f
get_config	src/config.py	/^    def get_config(self):$/;"	m	class:Config
get_cos_similarity_by_threshold	src/action.py	/^    def get_cos_similarity_by_threshold(self, cos_dist_matrix, threshold):$/;"	m	class:Action
get_cos_similarity_distance	src/action.py	/^    def get_cos_similarity_distance(self, features):$/;"	m	class:Action
get_data_with_local_batch_size	src/dataset.py	/^    def get_data_with_local_batch_size(self, data, batch_size):$/;"	m	class:Dataset
get_dataloader	src/dataset.py	/^    def get_dataloader(self):$/;"	m	class:Dataset
get_generated_targets	src/action.py	/^    def get_generated_targets(self, model, data, threshold):$/;"	m	class:Action
get_loss_fn	src/action.py	/^    def get_loss_fn(self):$/;"	m	class:Action
get_mean_std	src/dataset.py	/^def get_mean_std(dataset, ratio=0.01):$/;"	f
get_metrics	src/action.py	/^    def get_metrics(self, y_true: list, y_pred: list):$/;"	m	class:Action
get_model	src/net.py	/^    def get_model(self):$/;"	m	class:Net
get_nmi	src/action.py	/^def get_nmi(y_true, y_pred):$/;"	f
get_optimizer	src/action.py	/^    def get_optimizer(self, model, learning_rate: float):$/;"	m	class:Action
init_environment	src/main.py	/^def init_environment(config: dict):$/;"	f
init_model	src/net.py	/^    def init_model(self):$/;"	m	class:Net
linear_assignment	src/utils/linear_assignment_.py	/^def linear_assignment(X):$/;"	f
load_data	src/dataset.py	/^    def load_data(self):$/;"	m	class:Dataset
load_dataloader	src/dataset.py	/^    def load_dataloader(self):$/;"	m	class:Dataset
main	src/main.py	/^def main():$/;"	f
modifiedBCELoss	src/utils/loss.py	/^class modifiedBCELoss(nn.Module):$/;"	c
next	src/dataset.py	/^    def next(self):$/;"	m	class:DataPrefetcher
plot_epoch	src/agent.py	/^    def plot_epoch(self, metrics, loss, epoch, writer, is_train):$/;"	m	class:Agent
plot_loss	src/action.py	/^    def plot_loss(self, loss, epoch, writer, is_train: bool):$/;"	m	class:Action
plot_metrics	src/action.py	/^    def plot_metrics(self, metrics: dict, epoch: int, writer, is_train: bool):$/;"	m	class:Action
preload	src/dataset.py	/^    def preload(self):$/;"	m	class:DataPrefetcher
print_config	src/config.py	/^    def print_config(self):$/;"	m	class:Config
print_model	src/net.py	/^    def print_model(self, input_size):$/;"	m	class:Net
read_hdf	src/dataset.py	/^    def read_hdf(self, filepath: str, key:str):$/;"	m	class:Dataset
rescale_op	src/dataset.py	/^    def rescale_op(self, img):$/;"	m	class:Dataset
reset	src/action.py	/^    def reset(self):$/;"	m	class:AverageMeter
reset_parameters	src/net.py	/^    def reset_parameters(self):$/;"	m	class:Net
run	src/agent.py	/^    def run(self):$/;"	m	class:Agent
save_model	src/action.py	/^    def save_model(self, model, optimizer, epoch, metrics, last=False):$/;"	m	class:Action
set_environment	src/agent.py	/^    def set_environment(self):$/;"	m	class:Agent
smallDataset	src/dataset.py	/^class smallDataset(torch.utils.data.Dataset):$/;"	c
str2bool	src/action.py	/^def str2bool(val):$/;"	f
time_this	src/action.py	/^def time_this(func, *args, **kwargs):$/;"	f
train_epoch	src/agent.py	/^    def train_epoch(self, train_loader, model, loss_fn, optimizer, threshold):$/;"	m	class:Agent
update	src/action.py	/^    def update(self, val, n=1):$/;"	m	class:AverageMeter
update_threshold	src/action.py	/^    def update_threshold(self, threshold: float, epoch: int):$/;"	m	class:Action
wrapper	src/action.py	/^    def wrapper(*args, **kwargs):$/;"	f	function:gcollect
wrapper	src/action.py	/^    def wrapper(*args, **kwargs):$/;"	f	function:time_this
